import { MyContext } from "../types.ts";
import db from "../database.ts";

export async function handleGlobalStats(ctx: MyContext) {
  try {
    if (!db.users || !db.valentines) {
      throw new Error("Repositories not initialized");
    }
    const totalValentines = await db.valentines.getTotalCount();
    const topSenders = await db.valentines.getTopUsers("senderId", 5);
    const topRecipients = await db.valentines.getTopUsers("recipientId", 5);

    const sendersFormatted = await Promise.all(
      topSenders.map(async (sender, index) => {
        const user = await db.users?.findByTelegramId(sender._id);
        if (!user) return null;
        return `${
          index + 1
        }. ${user.lastName} ${user.firstName} (${user.class}) - ${sender.count} –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫`;
      }),
    );

    const recipientsFormatted = await Promise.all(
      topRecipients.map(async (recipient, index) => {
        const user = await db.users?.findByTelegramId(recipient._id);
        if (!user) return null;
        return `${
          index + 1
        }. ${user.lastName} ${user.firstName} (${user.class}) - ${recipient.count} –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫`;
      }),
    );
    const message = "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫\n\n" +
      `–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫: ${totalValentines}\n\n` +
      "üèÜ –¢–æ–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π:\n" +
      sendersFormatted.filter(Boolean).join("\n") +
      "\n\n" +
      "üíù –¢–æ–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:\n" +
      recipientsFormatted.filter(Boolean).join("\n");

    await ctx.reply(message);
  } catch (error) {
    console.error("Error getting global stats:", error);
    await ctx.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
  }
}

export async function handlePersonalStats(ctx: MyContext) {
  try {
    if (!db.users || !db.valentines) {
      throw new Error("Repositories not initialized");
    }

    const user = await db.users.findByTelegramId(ctx.from?.id || 0);
    if (!user) {
      await ctx.reply(
        "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. " +
          "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
      );
      return;
    }

    const stats = await db.valentines.getUserStatistics(ctx.from?.id || 0);

    const message = "üìä –í–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n" +
      `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫: ${stats.sent}\n` +
      `–ü–æ–ª—É—á–µ–Ω–æ –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫: ${stats.received}\n\n` +
      `–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: ${stats.sent + stats.received}`;

    await ctx.reply(message);
  } catch (error) {
    console.error("Error getting personal stats:", error);
    await ctx.reply(
      "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
    );
  }
}
