import { MyContext } from "../types.ts";
import db from "../database.ts";
import {
  getClassesKeyboard,
  getMainKeyboard,
  getMessageKeyboard,
  getUsersKeyboard,
} from "../keyboards.ts";
import { moderationService } from "../services/moderation_service.ts";
import { User } from "../types.ts";

export async function handleSendValentine(ctx: MyContext) {
  try {
    if (!db.users) {
      throw new Error("Users repository not initialized");
    }

    const classes = await db.users.getClassesList();

    if (classes.length === 0) {
      await ctx.reply(
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ö–∞–∫ –≤—ã —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Å—å..?",
      );
      return;
    }

    ctx.session.classesPage = 0;

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", {
      reply_markup: getClassesKeyboard(classes, ctx.session.classesPage),
    });

    ctx.session.step = "choosing_class";
  } catch (error) {
    console.error("Error in handleSendValentine:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

export async function handleClassSelection(ctx: MyContext) {
  try {
    if (!ctx.message?.text || !db.users) {
      return;
    }

    if (ctx.message.text === "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") {
      await handleReturnToMainMenu(ctx);
      return;
    }

    const classes = await db.users.getClassesList();
    const totalPages = Math.ceil(classes.length / 8);

    if (await handleClassPagination(ctx, classes, totalPages)) {
      return;
    }

    const selectedClass = ctx.message.text;
    const users = await db.users.findByClass(selectedClass);

    if (users.length === 0) {
      await ctx.reply(
        "–í —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Å:",
        { reply_markup: getClassesKeyboard(classes, ctx.session.classesPage) },
      );
      return;
    }

    ctx.session.selectedClass = selectedClass;
    ctx.session.usersPage = 0;

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", {
      reply_markup: getUsersKeyboard(users, ctx.session.usersPage),
    });

    ctx.session.step = "choosing_recipient";
  } catch (error) {
    console.error("Error in handleClassSelection:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

export async function handleRecipientSelection(ctx: MyContext) {
  try {
    if (!ctx.message?.text || !db.users) {
      return;
    }

    if (ctx.message.text === "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∫–ª–∞—Å—Å–∞–º") {
      await handleReturnToClassSelection(ctx);
      return;
    }

    if (ctx.session.selectedClass) {
      const users = await db.users.findByClass(ctx.session.selectedClass);
      if (await handleUsersPagination(ctx, users)) {
        return;
      }
    }

    const [lastName, firstName] = ctx.message.text.split(" ");
    const users = await db.users.findByClass(ctx.session.selectedClass || "");
    const recipient = users.find(
      (u) => u.lastName === lastName && u.firstName === firstName,
    );

    if (!recipient) {
      await ctx.reply("–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
        reply_markup: getUsersKeyboard(users, ctx.session.usersPage),
      });
      return;
    }

    ctx.session.selectedUser = recipient;

    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏:", {
      reply_markup: getMessageKeyboard(),
    });

    ctx.session.step = "entering_message";
  } catch (error) {
    console.error("Error in handleRecipientSelection:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

export async function handleMessage(ctx: MyContext) {
  try {
    if (!ctx.message?.text || !db.valentines) {
      return;
    }

    if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É") {
      await handleReturnToMainMenu(ctx);
      return;
    }

    if (!ctx.session.selectedUser) {
      return;
    }

    const isInappropriate = await moderationService.moderateMessage(
      ctx.message.text,
    );
    if (isInappropriate === "1") {
      await ctx.reply(
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        { reply_markup: getMessageKeyboard() },
      );
      return;
    }

    const messageId = await db.valentines.create(
      ctx.from?.id || 0,
      ctx.session.selectedUser.telegramId,
    );

    await ctx.api.sendMessage(
      ctx.session.selectedUser.telegramId,
      `üíå –£ –≤–∞—Å –Ω–æ–≤–∞—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞!\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${ctx.message.text}`,
      {
        reply_markup: {
          inline_keyboard: [[
            {
              text: "–ü–æ–∫–∞–∑–∞—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è",
              callback_data: `show_id:${messageId}`,
            },
          ]],
        },
      },
    );

    await ctx.reply(
      `–í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!`,
      { reply_markup: getMainKeyboard() },
    );

    await resetSession(ctx);
  } catch (error) {
    console.error("Error in handleMessage:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    );
  }
}

async function handleReturnToMainMenu(ctx: MyContext) {
  await ctx.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", {
    reply_markup: getMainKeyboard(),
  });
  await resetSession(ctx);
}

async function handleReturnToClassSelection(ctx: MyContext) {
  if (!db.users) {
    throw new Error("Users repository not initialized");
  }

  const classes = await db.users.getClassesList();
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", {
    reply_markup: getClassesKeyboard(classes, ctx.session.classesPage),
  });

  ctx.session.step = "choosing_class";
  ctx.session.selectedClass = undefined;
  ctx.session.selectedUser = undefined;
  ctx.session.usersPage = undefined;
}

async function handleClassPagination(
  ctx: MyContext,
  classes: string[],
  totalPages: number,
): Promise<boolean> {
  if (ctx.message?.text === "‚¨ÖÔ∏è") {
    if (ctx.session.classesPage && ctx.session.classesPage > 0) {
      ctx.session.classesPage--;
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", {
        reply_markup: getClassesKeyboard(classes, ctx.session.classesPage),
      });
    }
    return true;
  }

  if (ctx.message?.text === "‚û°Ô∏è") {
    if (
      ctx.session.classesPage !== undefined &&
      ctx.session.classesPage < totalPages - 1
    ) {
      ctx.session.classesPage++;
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", {
        reply_markup: getClassesKeyboard(classes, ctx.session.classesPage),
      });
    }
    return true;
  }

  return false;
}

async function handleUsersPagination(
  ctx: MyContext,
  users: User[],
): Promise<boolean> {
  const totalPages = Math.ceil(users.length / 8);

  if (ctx.message?.text === "‚¨ÖÔ∏è") {
    if (ctx.session.usersPage && ctx.session.usersPage > 0) {
      ctx.session.usersPage--;
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", {
        reply_markup: getUsersKeyboard(users, ctx.session.usersPage),
      });
    }
    return true;
  }

  if (ctx.message?.text === "‚û°Ô∏è") {
    if (
      ctx.session.usersPage !== undefined &&
      ctx.session.usersPage < totalPages - 1
    ) {
      ctx.session.usersPage++;
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", {
        reply_markup: getUsersKeyboard(users, ctx.session.usersPage),
      });
    }
    return true;
  }

  return false;
}

function resetSession(ctx: MyContext) {
  ctx.session.step = undefined;
  ctx.session.selectedClass = undefined;
  ctx.session.selectedUser = undefined;
  ctx.session.classesPage = undefined;
  ctx.session.usersPage = undefined;
}
